configfile: "config.yaml"

include: "rules/download.smk"
include: "rules/id_converter.smk"

rule all:
    input:
        anno = "rawdata/IRGSP-1.0_representative_annotation_2023-09-07.tsv.gz",
        bwa = ["results/genome/os.rap-db.genome.fa" + suffix for suffix in [".amb", ".ann", ".bwt", ".pac", ".sa"]],
        star_index = "results/star_index",
        annovar = ["results/osdb/OS_refGene.txt", "results/osdb/OS_refGeneMrna.fa"],
        id_converter = "results/id_converter.txt",
        diamond = "results/os.rap-db.dmnd",
        transcript = "results/custom_bed/transcript.bed",
        subread_index = "results/subread_index/subread_index.files",
        hisat2_index = "results/hisat2_index/hisat2_index.1.ht2",
        kasalath = "rawdata/kasalath_genome/all.fasta",
        longest_protein = "results/longest_protein.fa"

rule genome:
    input:
        "rawdata/IRGSP-1.0_genome.fasta.gz"
    output:
        fa = "results/genome/os.rap-db.genome.fa",
        fai = "results/genome/os.rap-db.genome.fa.fai",
        dict = "results/genome/os.rap-db.genome.dict"
    shell:
        '''
        gzip -dc {input} > {output.fa}
        samtools faidx {output.fa}
        gatk CreateSequenceDictionary -R {output.fa}
        '''

rule bwa:
    input:
        "results/genome/os.rap-db.genome.fa"
    output:
        ["results/genome/os.rap-db.genome.fa" + suffix for suffix in [".amb", ".ann", ".bwt", ".pac", ".sa"]]
    shell:
        "bwa index {input}"

rule make_gtf:
    input:
        "rawdata/IRGSP-1.0_representative/transcripts.gff"
    output:
        "results/gtf/os.rap-db.make.gtf"
    script:
        "scripts/make_gtf.R"


rule star_index:
    input:
        fa = "results/genome/os.rap-db.genome.fa",
        gtf = "results/gtf/os.rap-db.make.gtf"
    output:
        star_index = directory("results/star_index")
    threads:
        20
    shell:
        '''
        STAR \
            --runThreadN {threads} \
            --runMode genomeGenerate \
            --genomeDir {output.star_index} \
            --genomeFastaFiles {input.fa} \
            --sjdbGTFfile {input.gtf} \
            --genomeSAindexNbases 13  # Adjusted base on STAR's warning.
        '''

rule subread_index:
    input:
        fa = "results/genome/os.rap-db.genome.fa"
    output:
        "results/subread_index/subread_index.files"
    params:
        prefix = "results/subread_index/subread_index"
    shell:
        '''
        subread-buildindex -o {params.prefix} {input.fa}
        '''

rule hisat2_index:
    input:
        fa = "results/genome/os.rap-db.genome.fa"
    output:
        hisat2_index = "results/hisat2_index/hisat2_index.1.ht2"
    params:
        prefix = "results/hisat2_index/hisat2_index"
    shell:
        '''
        hisat2-build {input.fa} {params.prefix}
        '''

rule annovar:
    input:
        fa = "results/genome/os.rap-db.genome.fa",
        gtf = "results/gtf/os.rap-db.make.gtf"
    output:
        refGene = "results/annovar_osdb/OS_refGene.txt",
        refGeneMrna = "results/osdb/annovar_OS_refGeneMrna.fa"
    shell:
        '''
        mkdir -p osdb
        gtfToGenePred \
            -genePredExt \
            -ignoreGroupsWithoutExons \
            {input.gtf} \
            {output.refGene}
        retrieve_seq_from_fasta.pl \
            --format refGene \
            --seqfile {input.fa} \
            {output.refGene} \
            --out {output.refGeneMrna}
        '''


rule custom_bed:
    input:
        gtf = "results/gtf/os.rap-db.make.gtf"
    output:
        transcript = "results/custom_bed/transcript.bed",
        gene = "results/custom_bed/gene.bed"
    script:
        "scripts/custom_bed.R"

