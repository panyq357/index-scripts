configfile: "config.yaml"


include: "rules/download.smk"
include: "rules/id_converter.smk"


rule all:
    input:
        anno = "rawdata/IRGSP-1.0_representative_annotation_2024-07-12.tsv.gz",
        bwa = ["results/genome/os.rap-db.genome.fa" + suffix for suffix in [".amb", ".ann", ".bwt", ".pac", ".sa"]],
        bowtie2 = ["results/genome/os.rap-db.genome.fa" + suffix for suffix in [".1.bt2", ".2.bt2", ".3.bt2", ".4.bt2", ".rev.1.bt2", ".rev.2.bt2"]],
        star_index = "results/star_index",
        id_converter = "results/id_converter.txt",
        diamond = "results/os.rap-db.dmnd",
        transcript = "results/custom_bed/transcript.bed",
        subread_index = "results/subread_index/subread_index.files",
        hisat2_index = "results/hisat2_index/hisat2_index.1.ht2",
        kasalath = "rawdata/kasalath_genome/all.fasta",
        longest_protein = "results/longest_protein.fa",
        gene_info = "results/gene_info.tsv.gz"


rule genome:
    input:
        "rawdata/IRGSP-1.0_genome.fasta.gz"
    output:
        fa = "results/genome/os.rap-db.genome.fa",
        fai = "results/genome/os.rap-db.genome.fa.fai",
        dict = "results/genome/os.rap-db.genome.dict"
    shell:
        '''
        gzip -dc {input} > {output.fa}
        samtools faidx {output.fa}
        gatk CreateSequenceDictionary -R {output.fa}
        '''

rule bwa:
    input:
        "results/genome/os.rap-db.genome.fa"
    output:
        ["results/genome/os.rap-db.genome.fa" + suffix for suffix in [".amb", ".ann", ".bwt", ".pac", ".sa"]]
    shell:
        "bwa index {input}"


rule bowtie2:
    input:
        "results/genome/os.rap-db.genome.fa"
    output:
        ["results/genome/os.rap-db.genome.fa" + suffix for suffix in [".1.bt2", ".2.bt2", ".3.bt2", ".4.bt2", ".rev.1.bt2", ".rev.2.bt2"]]
    shell:
        "bowtie2-build {input} {input}"


rule cat_gff:
    input:
        "rawdata/IRGSP-1.0_representative/locus.gff",
        "rawdata/IRGSP-1.0_representative/transcripts_exon.gff",
        "rawdata/IRGSP-1.0_representative/transcripts.gff"
    output:
        temp("resources/cat.gff")
    shell:
        "cat {input} > {output}"


rule make_gtf:
    input:
        "resources/cat.gff"
    output:
        "results/gtf/os.rap-db.make.gtf"
    script:
        "scripts/make_gtf.R"


rule star_index:
    input:
        fa = "results/genome/os.rap-db.genome.fa",
        gtf = "results/gtf/os.rap-db.make.gtf"
    output:
        star_index = directory("results/star_index")
    threads:
        20
    shell:
        '''
        STAR \
            --runThreadN {threads} \
            --runMode genomeGenerate \
            --genomeDir {output.star_index} \
            --genomeFastaFiles {input.fa} \
            --sjdbGTFfile {input.gtf} \
            --genomeSAindexNbases 13  # Adjusted base on STAR's warning.
        '''


rule subread_index:
    input:
        fa = "results/genome/os.rap-db.genome.fa"
    output:
        "results/subread_index/subread_index.files"
    params:
        prefix = "results/subread_index/subread_index"
    shell:
        '''
        subread-buildindex -o {params.prefix} {input.fa}
        '''


rule hisat2_index:
    input:
        fa = "results/genome/os.rap-db.genome.fa"
    output:
        hisat2_index = "results/hisat2_index/hisat2_index.1.ht2"
    params:
        prefix = "results/hisat2_index/hisat2_index"
    shell:
        '''
        hisat2-build {input.fa} {params.prefix}
        '''


rule custom_bed:
    input:
        gtf = "results/gtf/os.rap-db.make.gtf",
        fa = "results/genome/os.rap-db.genome.fa"  # for seqlengths
    output:
        transcript = "results/custom_bed/transcript.bed",
        exon = "results/custom_bed/exon.bed",
        upstream_3kb = "results/custom_bed/upstream_3kb.bed",
    script:
        "scripts/custom_bed.R"


rule get_gene_info:
    input:
        "rawdata/IRGSP-1.0_representative_annotation_2024-07-12.tsv.gz"
    output:
        "results/gene_info.tsv.gz"
    script:
        "scripts/get_gene_info.R"
